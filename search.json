[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "refbank",
    "section": "",
    "text": "Iterated reference games have been used extensively as a paradigm to study communication, pragmatics, and convention formation. These games have varied along a number of dimensions, including design features (e.g., number of participants, communication capacity) and analytic targets (e.g., change in accuracy over trials, change in description length over trials).\nRefbank is an open repository of conversation data from such iterated referential communication tasks. It is an effort to harmonise iterated reference game data from multiple datasets to enable the testing of cross-study moderators as well as robust, larger-scale analyses of the emergence of new referring expressions.\nData are available under a CC-BY-NC license."
  },
  {
    "objectID": "about.html#refbank",
    "href": "about.html#refbank",
    "title": "refbank",
    "section": "",
    "text": "Iterated reference games have been used extensively as a paradigm to study communication, pragmatics, and convention formation. These games have varied along a number of dimensions, including design features (e.g., number of participants, communication capacity) and analytic targets (e.g., change in accuracy over trials, change in description length over trials).\nRefbank is an open repository of conversation data from such iterated referential communication tasks. It is an effort to harmonise iterated reference game data from multiple datasets to enable the testing of cross-study moderators as well as robust, larger-scale analyses of the emergence of new referring expressions.\nData are available under a CC-BY-NC license."
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "refbank",
    "section": "",
    "text": "You can access refbank data in R through the refbank package or directly using the Redivis API for Python.\n\nRPython\n\n\n\nInstall the refbankr R package:\n\nremotes::install_github(\"refbank/refbankr\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(refbankr)\n\n# Load table as tidyverse tibble\ndatasets &lt;- get_datasets()\n\n# trial-level information about stimuli\ntrials &lt;- get_trials()\n\n# information about participant choices on each trial\nchoices &lt;- get_choices()\n\n# language data for each trial\nmessages &lt;- get_messages()\nSee refbankr github repository for more information.\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"mcfrank\")\ndataset = user.dataset(\"refbank\")\ntable = dataset.table(\"trials\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "analysis.html#programmatic-access",
    "href": "analysis.html#programmatic-access",
    "title": "refbank",
    "section": "",
    "text": "You can access refbank data in R through the refbank package or directly using the Redivis API for Python.\n\nRPython\n\n\n\nInstall the refbankr R package:\n\nremotes::install_github(\"refbank/refbankr\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(refbankr)\n\n# Load table as tidyverse tibble\ndatasets &lt;- get_datasets()\n\n# trial-level information about stimuli\ntrials &lt;- get_trials()\n\n# information about participant choices on each trial\nchoices &lt;- get_choices()\n\n# language data for each trial\nmessages &lt;- get_messages()\nSee refbankr github repository for more information.\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"mcfrank\")\ndataset = user.dataset(\"refbank\")\ntable = dataset.table(\"trials\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Refbank",
    "section": "",
    "text": "Plot = import(\"https://esm.sh/@observablehq/plot@0.6.13\")\nd = transpose(data)\n\ndistinct_cutoff = 10\n\ndisc_types = ['string', 'boolean']\ndisc_vars = vars.filter(d =&gt; disc_types.includes(d.type) && d.statistics.numDistinct &lt;= distinct_cutoff).map(d =&gt; [d.label ? d.label : d.name, d.name])\ndisc_opts = new Map([['', null]].concat(disc_vars))\n\ncont_types = ['integer', 'float', 'date', 'datetime', 'time']\ncont_vars = vars.filter(d =&gt; cont_types.includes(d.type) && d.statistics.numDistinct &gt; distinct_cutoff).map(d =&gt; [d.label ? d.label : d.name, d.name])\ncont_opts = new Map(cont_vars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof x_var = Inputs.select(cont_opts, {value: Array.from(cont_opts.values())[0], label: \"X axis\"})\nviewof y_var = Inputs.select(cont_opts, {value: Array.from(cont_opts.values())[1], label: \"Y axis\"})\nviewof color_var = Inputs.select(disc_opts, {value: Array.from(disc_opts.values())[1], label: \"Color\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefault_color = d3.schemeCategory10[0]\nplt_color = color_var || default_color\n\nall_vars = cont_vars.concat(disc_vars)\nchannels = Object.fromEntries(all_vars.map(k =&gt; [k[1], k[1]]))\n\nviewof scatter = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  inset: 8,\n   grid: true,\n      x: { tickFormat: \"\" },\n  color: { legend: true },\n  marks: [\n    Plot.dot(d, {\n      x: x_var,\n      y: y_var,\n      stroke: plt_color,\n      tip: true,\n      channels: channels\n    }),\n  ]\n})\n\nviewof x_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      x: { tickFormat: \"\" },\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: x_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nviewof y_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: y_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nhtml`&lt;div style=\"display: flex; flex-wrap: wrap; align-items: flex-end;\"&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof y_hist} &lt;/div&gt;\n &lt;div style=\"flex-basis: 50%\"&gt; ${viewof scatter} &lt;/div&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof x_hist} &lt;/div&gt;\n&lt;/div&gt;`"
  }
]